Q1. How to query a database to display all the tables in it.
http://stackoverflow.com/questions/205736/get-list-of-all-tables-in-oracle

A) if you have dba access (i.e dba grants acess to 'SELECT ANY DICTIONARY' PRIVILEGE OR 'SELECT_CATALOG_ROLE" ROLE
then use 
  SELECT OWNER,TABLE_NAME FROM DBA_TABLES
  
B) if you do not have access to DBA_TABLES, use ALL_TABLES view. ALL_tables contain the tables that your account has access
SELECT OWNER,TABLE_NAME FROM ALL_TABLES
  
C) If you are concerned with tables that you OWN, not those that you have access to, you can use, USER_TABLES
  SELECT TABLE_NAME FROM USER_TABLES;
  Here there won't be owner column, because the owner is you.
 
  Keep in mind that some "tables" may actually be "views" so you can also try running something like:
  SELECT view_name FROM all_views;
  select * from user_views
  
  
  
  SELECT DISTINCT OWNER, OBJECT_NAME 
    FROM ALL_OBJECTS 
    WHERE OBJECT_TYPE = 'TABLE' -- and owner='searsdacdev'
  
  the above displays all owner's all tables including sys, etc
  
  -----
  Legacy code is by use of TAB,DICT,TABS,CAT
  TAB,CAT VIEWS show info about tables that are in user's recycle bin. while,
  [DBA|ALL|USER]_TABLES VIEWS all filter those in recycle bin.
  DICT combines tables and synonyms and doesn't tell you who owns the object.
  CAT show infor about materialized view logs with a TABLE_TYPE of 'TABLE', which you really don't want.
  
  
  
--------------------------------------------------------------------
Q2.To see all users
select * from all_users
---------------------------------
Q3. 
http://psoug.org/blogs/mohan/
Transform a subquery involving the IN clause to a Join?
Transform a statement involving an OR condition to a UNION ALL?
---------------------
Insert multiple rows in to same table/ multiple tables
The below inserts 3 rows into emp and 1 row into dept table

insert all 
 into emp values(1,'dora',1)
 into emp values (1,'dora',2)
 into emp values(2,'babu',3)
 into emp values(2,'babu',3)
 into dept values(1,'sci')
SELECT * from dual;
---------------------

select min(rowid) from emp group by empid
 will give distinct rows, which are unique on emp id, without deplicate rowids.
We delete all other rows based on rowid, except these by 
delete from emp
where rowid not in  (d min(rowid) from emp grou by empid)
---------------- |  
 CREATE TABLE emp2 AS
    SELECT distinct *
    FROM   emp;

  DROP TABLE emp;

  RENAME emp2 TO emp;
  --------------
  DELETE FROM emp a
    WHERE rowid > (
      SELECT min(rowid)
      FROM   emp b
      WHERE  a.emp_id = b.emp_id
    );
	-----------------
	DELETE FROM emp a
    WHERE EXISTS (
      SELECT 'true'
      FROM   emp b
      WHERE  b.emp_id = a.emp_id
        AND  b.rowid < a.rowid
    );
	In the above query we are generating all the rows where the row ids doesn't match  with the same emplyee id. 
	When both the rowids are same, we generate false in the inner subquery, where the exists condition fails and we get unique rows.
	--------------------------------------
